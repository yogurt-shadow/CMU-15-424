/* Exported from KeYmaera X v4.9.3 */

Theorem "L4Q2"
/**
 * Running time (in minutes, estimate):
 * Proved?(Y/N):
 * KeYmaera X Version:
 *
 * Please do not put personally identifiable information in any file that you
 * submit. Any resulting implicit bias can and will be used against your grade.
 */

Functions
  Real A;      /* Robot's max acceleration */
  Real B;      /* Robot's max braking */
  Real T;      /* Time-trigger limit on evolution */

  /* You can either decide to use a safety buffer between the center of the (non-moving)
   * obstacle or to consider bounding circles around your robot and the
   * obstacle.
   */

  Real buffer;   /* Required distance between center of robot and center of obstacle */
  Real rogr;     /* Radius of bounding circle around obstacle shape */
  Real r;        /* Radius of bounding circle around robot shape */
End.

ProgramVariables
  Real x; /* Position of robot in x direction */
  Real y; /* Position of robot in y direction */

  Real dx;     /* Unit vector in direction of travel, x direction */
  Real dy;     /* Unit vector in direction of travel, y direction */
  Real trackr; /* Robot track radius */

  Real v; /* Linear velocity of robot */
  Real a; /* Linear acceleration of robot */

  Real rogx; /* Position of center of obstacle in x direction */
  Real rogy; /* Position of center of obstacle in y direction */

  Real t; /* Time */

  Real cx; /* Position of circle center in x direction */
  Real cy; /* Position of circle center in y direction */
End.

Problem
  (
    buffer > 0 & rogr > 0 & r > 0 & A > 0 & B > 0 & buffer > rogr + r & dx^2+dy^2=1 & (x-cx)^2+(y-cy)^2=trackr^2 & (x-rogx)^2+(y-rogy)^2 > buffer^2
  ) /* Initial conditions */
  ->
  [
    {
      /* Discrete control of robot and rogue-bots */
      t := 0;
      trackr := *;
      ?trackr != 0;
      cx := x-dy*trackr;
      cy := y+dx*trackr;
      ?(trackr > 0 & (cx-rogx)^2+(cy-rogy)^2 > (buffer + trackr)^2)
      |
      (trackr < 0 & (cx-rogx)^2+(cy-rogy)^2 > (buffer - trackr)^2)
      ;
      a := *;
      ?a >= -B & a <= A;
      {x' = dx*v, y' = dy*v, dx' = -v*dy/trackr, dy' = v*dx/trackr, v' = a, /* Differential Equations */
       t' = 1
       & t <= T & v >= 0
      }
    }*@invariant(dx^2+dy^2=1 & (x-rogx)^2+(y-rogy)^2 > buffer^2 & (x-cx)^2+(y-cy)^2=trackr^2) /* loop invariant */
  ]((x-rogx)^2+(y-rogy)^2 > buffer^2) /* Safety condition */
End.

Tactic "L4Q2: Proof"
implyR(1) ; loop("dx^2+dy^2=1&(x-rogx)^2+(y-rogy)^2>buffer()^2&(x-cx)^2+(y-cy)^2=trackr^2", 1) ; <(
  QE,
  QE,
  unfold ; dC("dx^2+dy^2=1", 1) ; <(
    dC("x-dy*trackr=cx&y+dx*trackr=cy", 1) ; <(
      dC("(x-cx)^2+(y-cy)^2=trackr^2", 1) ; <(
        dW(1) ; andR(1) ; <(
          QE,
          andR(1) ; <(
            andL(-1) ; andL(-2) ; andL(-3) ; andL(-4) ; andL(-5) ; andL(-6) ; andL(-7) ; andL(-8) ; andL(-9) ; hideL(-8=="trackr!=0") ; hideL(-7=="buffer()>rogr()+r()") ; hideL(-6=="B()>0") ; hideL(-5=="A()>0") ; hideL(-4=="r()>0") ; hideL(-3=="rogr()>0") ; orL(-3) ; <(
              andL(-3) ; hideL(-3=="a>=-B()&a<=A()") ; andL(-1) ; hideL(-4=="((t<=T()&v>=0)&dx^2+dy^2=1)&x-dy*trackr=cx&y+dx*trackr=cy") ; QE,
              hideL(-4=="a>=-B()&a<=A()") ; andL(-3) ; andL(-1) ; hideL(-4=="((t<=T()&v>=0)&dx^2+dy^2=1)&x-dy*trackr=cx&y+dx*trackr=cy") ; QE
              ),
            QE
            )
          ),
        dIRule(1) ; <(
          QE,
          unfold ; QE
          )
        ),
      dIRule(1) ; <(
        QE,
        unfold ; QE
        )
      ),
    dIRule(1) ; <(
      QE,
      unfold ; QE
      )
    )
  )
End.

End.